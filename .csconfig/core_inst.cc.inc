/***
 * THIS FILE IS AUTOMATICALLY GENERATED
 * Do not edit this file. It will be overwritten when the configure script is run.
***/

#include "/home/gowtham/Desktop/Sem-7/CS683/projects/test/ChampSim/btb/basic_btb/indirect_predictor.h"
#include "/home/gowtham/Desktop/Sem-7/CS683/projects/test/ChampSim/btb/basic_btb/return_stack.h"
#include "/home/gowtham/Desktop/Sem-7/CS683/projects/test/ChampSim/prefetcher/next_line/next_line.h"
#include "/home/gowtham/Desktop/Sem-7/CS683/projects/test/ChampSim/branch/hashed_perceptron/hashed_perceptron.h"
#include "/home/gowtham/Desktop/Sem-7/CS683/projects/test/ChampSim/prefetcher/no/no.h"
#include "/home/gowtham/Desktop/Sem-7/CS683/projects/test/ChampSim/replacement/lru/lru.h"
#include "/home/gowtham/Desktop/Sem-7/CS683/projects/test/ChampSim/branch/hashed_perceptron/folded_shift_register.h"
#include "/home/gowtham/Desktop/Sem-7/CS683/projects/test/ChampSim/btb/basic_btb/direct_predictor.h"
#include "/home/gowtham/Desktop/Sem-7/CS683/projects/test/ChampSim/btb/basic_btb/basic_btb.h"
champsim::configured::generated_environment<0x378eda8583286984>::generated_environment() :
channels{
champsim::channel{64, 8, 64, champsim::data::bits{champsim::lg2(64)}, 1},
champsim::channel{std::numeric_limits<std::size_t>::max(), std::numeric_limits<std::size_t>::max(), std::numeric_limits<std::size_t>::max(), champsim::data::bits{champsim::lg2(BLOCK_SIZE)}, 0},
champsim::channel{32, 128, 32, champsim::data::bits{champsim::lg2(4096)}, 0},
champsim::channel{32, 128, 32, champsim::data::bits{champsim::lg2(4096)}, 0},
champsim::channel{32, 16, 32, champsim::data::bits{champsim::lg2(64)}, 0},
champsim::channel{32, 16, 32, champsim::data::bits{champsim::lg2(64)}, 0},
champsim::channel{32, 32, 32, champsim::data::bits{champsim::lg2(64)}, 0},
champsim::channel{16, 0, 0, champsim::data::bits{champsim::lg2(PAGE_SIZE)}, 0},
champsim::channel{16, 0, 16, champsim::data::bits{champsim::lg2(4096)}, 1},
champsim::channel{16, 16, 16, champsim::data::bits{champsim::lg2(4096)}, 1},
champsim::channel{32, 128, 32, champsim::data::bits{champsim::lg2(4096)}, 0},
champsim::channel{64, 32, 64, champsim::data::bits{champsim::lg2(64)}, 1},
champsim::channel{64, 8, 64, champsim::data::bits{champsim::lg2(64)}, 1}
},
DRAM{
champsim::chrono::picoseconds{312}, champsim::chrono::picoseconds{625}, std::size_t{12}, std::size_t{12}, std::size_t{12}, std::size_t{52}, champsim::chrono::microseconds{32000}, {&channels.at(1)}, 64, 64, 1, champsim::data::bytes{8}, 65536, 1024, 1, 8, 8, 8192
},
vmem{
champsim::data::bytes{4096}, 5, champsim::chrono::picoseconds{250*200}, DRAM, 1
},
ptws {
build<PageTableWalker>(
  champsim::ptw_builder{ champsim::defaults::default_ptw }
    .name("cpu0_PTW")
    .upper_levels({&channels.at(7)})
    .virtual_memory(&vmem)
    .name("cpu0_PTW")
    .cpu(0)
    .lower_level(&channels.at(0))
    .mshr_size(5)
    .tag_bandwidth(champsim::bandwidth::maximum_type{2})
    .fill_bandwidth(champsim::bandwidth::maximum_type{2})
    .clock_period(champsim::chrono::picoseconds{250})
    .add_pscl(5, 1, 2)
    .add_pscl(4, 1, 4)
    .add_pscl(3, 2, 4)
    .add_pscl(2, 4, 8)
)
},
caches {
build<CACHE>(
  champsim::cache_builder{ champsim::defaults::default_llc }
    .name("LLC")
    .upper_levels({&channels.at(6)})
    .sets(2048)
    .ways(16)
    .pq_size(32)
    .mshr_size(64)
    .latency(20)
    .tag_bandwidth(champsim::bandwidth::maximum_type{1})
    .fill_bandwidth(champsim::bandwidth::maximum_type{1})
    .offset_bits(champsim::data::bits{champsim::lg2(64)})
    .prefetch_activate(access_type::LOAD, access_type::PREFETCH)
    .replacement<class lru>()
    .prefetcher<class no>()
    .lower_level(&channels.at(1))
    .clock_period(champsim::chrono::picoseconds{250})
    .reset_prefetch_as_load()
    .reset_virtual_prefetch(),
  champsim::cache_builder{ champsim::defaults::default_dtlb }
    .name("cpu0_DTLB")
    .upper_levels({&channels.at(8)})
    .sets(16)
    .ways(4)
    .pq_size(0)
    .mshr_size(8)
    .latency(1)
    .tag_bandwidth(champsim::bandwidth::maximum_type{2})
    .fill_bandwidth(champsim::bandwidth::maximum_type{2})
    .offset_bits(champsim::data::bits{champsim::lg2(4096)})
    .replacement<class lru>()
    .prefetcher<class no>()
    .lower_level(&channels.at(2))
    .clock_period(champsim::chrono::picoseconds{250})
    .reset_prefetch_as_load(),
  champsim::cache_builder{ champsim::defaults::default_itlb }
    .name("cpu0_ITLB")
    .upper_levels({&channels.at(9)})
    .sets(16)
    .ways(4)
    .pq_size(16)
    .mshr_size(8)
    .latency(1)
    .tag_bandwidth(champsim::bandwidth::maximum_type{2})
    .fill_bandwidth(champsim::bandwidth::maximum_type{2})
    .offset_bits(champsim::data::bits{champsim::lg2(4096)})
    .replacement<class lru>()
    .prefetcher<class no>()
    .lower_level(&channels.at(3))
    .clock_period(champsim::chrono::picoseconds{250})
    .reset_prefetch_as_load(),
  champsim::cache_builder{ champsim::defaults::default_l1d }
    .name("cpu0_L1D")
    .upper_levels({{&channels.at(0), &channels.at(12)}})
    .sets(64)
    .ways(12)
    .pq_size(8)
    .mshr_size(16)
    .latency(5)
    .tag_bandwidth(champsim::bandwidth::maximum_type{2})
    .fill_bandwidth(champsim::bandwidth::maximum_type{2})
    .offset_bits(champsim::data::bits{champsim::lg2(64)})
    .prefetch_activate(access_type::LOAD, access_type::PREFETCH)
    .replacement<class lru>()
    .prefetcher<class next_line>()
    .lower_translate(&channels.at(8))
    .lower_level(&channels.at(4))
    .clock_period(champsim::chrono::picoseconds{250})
    .reset_prefetch_as_load()
    .reset_virtual_prefetch(),
  champsim::cache_builder{ champsim::defaults::default_l1i }
    .name("cpu0_L1I")
    .upper_levels({&channels.at(11)})
    .sets(64)
    .ways(8)
    .pq_size(32)
    .mshr_size(8)
    .latency(4)
    .tag_bandwidth(champsim::bandwidth::maximum_type{2})
    .fill_bandwidth(champsim::bandwidth::maximum_type{2})
    .offset_bits(champsim::data::bits{champsim::lg2(64)})
    .prefetch_activate(access_type::LOAD, access_type::PREFETCH)
    .replacement<class lru>()
    .prefetcher<class no>()
    .lower_translate(&channels.at(9))
    .lower_level(&channels.at(5))
    .clock_period(champsim::chrono::picoseconds{250})
    .reset_prefetch_as_load()
    .set_virtual_prefetch(),
  champsim::cache_builder{ champsim::defaults::default_l2c }
    .name("cpu0_L2C")
    .upper_levels({{&channels.at(4), &channels.at(5)}})
    .sets(1024)
    .ways(8)
    .pq_size(16)
    .mshr_size(32)
    .latency(10)
    .tag_bandwidth(champsim::bandwidth::maximum_type{1})
    .fill_bandwidth(champsim::bandwidth::maximum_type{1})
    .offset_bits(champsim::data::bits{champsim::lg2(64)})
    .prefetch_activate(access_type::LOAD, access_type::PREFETCH)
    .replacement<class lru>()
    .prefetcher<class no>()
    .lower_translate(&channels.at(10))
    .lower_level(&channels.at(6))
    .clock_period(champsim::chrono::picoseconds{250})
    .reset_prefetch_as_load()
    .reset_virtual_prefetch(),
  champsim::cache_builder{ champsim::defaults::default_stlb }
    .name("cpu0_STLB")
    .upper_levels({{&channels.at(2), &channels.at(3), &channels.at(10)}})
    .sets(128)
    .ways(12)
    .pq_size(128)
    .mshr_size(16)
    .latency(8)
    .tag_bandwidth(champsim::bandwidth::maximum_type{1})
    .fill_bandwidth(champsim::bandwidth::maximum_type{1})
    .offset_bits(champsim::data::bits{champsim::lg2(4096)})
    .prefetch_activate(access_type::LOAD, access_type::PREFETCH)
    .replacement<class lru>()
    .prefetcher<class next_line>()
    .lower_level(&channels.at(7))
    .clock_period(champsim::chrono::picoseconds{250})
    .reset_prefetch_as_load()
    .set_virtual_prefetch()
)
},
cores {
build<O3_CPU>(
  champsim::core_builder{ champsim::defaults::default_core }
    .ifetch_buffer_size(64)
    .decode_buffer_size(32)
    .dispatch_buffer_size(32)
    .rob_size(352)
    .lq_size(128)
    .sq_size(72)
    .fetch_width(champsim::bandwidth::maximum_type{6})
    .decode_width(champsim::bandwidth::maximum_type{6})
    .dispatch_width(champsim::bandwidth::maximum_type{6})
    .schedule_width(champsim::bandwidth::maximum_type{128})
    .execute_width(champsim::bandwidth::maximum_type{4})
    .lq_width(champsim::bandwidth::maximum_type{2})
    .sq_width(champsim::bandwidth::maximum_type{2})
    .retire_width(champsim::bandwidth::maximum_type{5})
    .mispredict_penalty(1)
    .decode_latency(1)
    .dispatch_latency(1)
    .schedule_latency(0)
    .execute_latency(0)
    .l1i(&(*std::next(std::begin(caches), 4)))
    .l1i_bandwidth((*std::next(std::begin(caches), 4)).MAX_TAG)
    .fetch_queues(&channels.at(11))
    .l1d_bandwidth((*std::next(std::begin(caches), 3)).MAX_TAG)
    .data_queues(&channels.at(12))
    .branch_predictor<class hashed_perceptron>()
    .btb<class basic_btb>()
    .index(0)
    .clock_period(champsim::chrono::picoseconds{250})
      .dib_set(32)
      .dib_way(8)
      .dib_window(16)
)
}
{
}

auto champsim::configured::generated_environment<0x378eda8583286984>::cpu_view() -> std::vector<std::reference_wrapper<O3_CPU>>
{
  std::vector<std::reference_wrapper<O3_CPU>> retval{};
  auto make_ref = [](auto& x){ return std::ref(x); };
  std::transform(std::begin(cores), std::end(cores), std::back_inserter(retval), make_ref);
  return retval;
}


auto champsim::configured::generated_environment<0x378eda8583286984>::cache_view() -> std::vector<std::reference_wrapper<CACHE>>
{
  std::vector<std::reference_wrapper<CACHE>> retval{};
  auto make_ref = [](auto& x){ return std::ref(x); };
  std::transform(std::begin(caches), std::end(caches), std::back_inserter(retval), make_ref);
  return retval;
}


auto champsim::configured::generated_environment<0x378eda8583286984>::ptw_view() -> std::vector<std::reference_wrapper<PageTableWalker>>
{
  std::vector<std::reference_wrapper<PageTableWalker>> retval{};
  auto make_ref = [](auto& x){ return std::ref(x); };
  std::transform(std::begin(ptws), std::end(ptws), std::back_inserter(retval), make_ref);
  return retval;
}


auto champsim::configured::generated_environment<0x378eda8583286984>::operable_view() -> std::vector<std::reference_wrapper<champsim::operable>>
{
  std::vector<std::reference_wrapper<champsim::operable>> retval{};
  auto make_ref = [](auto& x){ return std::ref<champsim::operable>(x); };
  std::transform(std::begin(cores), std::end(cores), std::back_inserter(retval), make_ref);
  std::transform(std::begin(caches), std::end(caches), std::back_inserter(retval), make_ref);
  std::transform(std::begin(ptws), std::end(ptws), std::back_inserter(retval), make_ref);
  retval.push_back(std::ref<champsim::operable>(DRAM));
  return retval;
}

auto champsim::configured::generated_environment<0x378eda8583286984>::dram_view() -> MEMORY_CONTROLLER&
{
  return DRAM;
}
